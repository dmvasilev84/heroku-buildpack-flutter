#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
set -o pipefail
unset GIT_DIR

export PATH="$PATH:/app/dart-sdk/bin:/app/.pub-cache/bin"

function print() {
  echo "-----> $1"
}

function fail() {
  echo "-----> ERROR: $1" >&2
  exit 1
}

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}

export_env_dir() {
  env_dir=$1
  acceptlist_regex=${2:-''}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
        export "$e=$(cat $env_dir/$e)"
    done
  fi
}

export_env_dir "$3"

mkdir -p $CACHE_DIR

cd $BUILD_DIR

print "Current build directory: $BUILD_DIR"

if [ ! -f "./Procfile" ]; then
  fail "Procfile not found in the root directory."
else
  print "Procfile found in the root directory."
fi

if [ -z "$FLUTTER_VERSION" ]; then
  fail "FLUTTER_VERSION is not set. Please specify the Flutter version to use."
fi

print "Downloading and installing Flutter SDK version $FLUTTER_VERSION..."
FLUTTER_ARCHIVE="flutter_linux_$FLUTTER_VERSION-stable.tar.xz"

# Ensure Flutter is downloaded properly
if ! curl -sSL "https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/$FLUTTER_ARCHIVE" -o $FLUTTER_ARCHIVE; then
  fail "Failed to download Flutter version $FLUTTER_VERSION"
fi

# Extract Flutter archive
if ! tar -xf $FLUTTER_ARCHIVE -C $BUILD_DIR; then
  fail "Failed to extract Flutter archive"
fi

rm $FLUTTER_ARCHIVE
export PATH="$BUILD_DIR/flutter/bin:$PATH"

print "Enabling web support"
flutter config --enable-web --no-version-check || fail "Failed to enable web support"

print "Running flutter clean"
flutter clean || fail "Flutter clean failed"

print "Getting flutter packages"
flutter pub get || fail "Failed to get packages"

if [ -z "$FLUTTER_BUILD" ]; then
  if [ "$ENVIRONMENT" = "prod" ]; then
    FLUTTER_BUILD="flutter build web --release --target=lib/main_release.dart"
  else
    FLUTTER_BUILD="flutter build web --release"
  fi
fi

print "Building Flutter project with: $FLUTTER_BUILD"
eval $FLUTTER_BUILD || fail "Flutter build failed"

print "Cleaning up unnecessary files"
rm -rf $BUILD_DIR/flutter
rm -rf $BUILD_DIR/.pub-cache
rm -rf $BUILD_DIR/.dart_tool
rm -rf $BUILD_DIR/flutter/bin/cache

print "Build completed successfully."
